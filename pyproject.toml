[project]
authors = [{ name = "raceychan", email = "raceychan@gmail.com" }]
dependencies = ["ididi>=1.1.2"]
description = "Anywise let you write your application anywise"
dynamic = ["version"]
name = "anywise"
readme = "README.md"
requires-python = ">= 3.12"


[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[tool.pyright]
exclude = ["tests"]
include = ["anywise/*.py"]
python_version = "3.12"
typeCheckingMode = "strict"

[tool.pytest.ini_options]
addopts = "-vx --strict-markers --capture=no"
asyncio_mode = "auto"

[tool.hatch.version]
path = "anywise/__init__.py"

[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["linux-64"]

[tool.pixi.dependencies]
python = ">=3.12"
typing_extensions = ">=4.12.2,<5"

[tool.pixi.feature.publish.dependencies]
hatch = ">=1.13.0,<2"
twine = ">=5.1.1,<6"

[tool.pixi.feature.dev.dependencies]
fastapi = ">=0.115.5"
sqlalchemy = ">=2.0.36,<3"

[tool.pixi.feature.test.dependencies]
pytest = ">=8.3.3"
pytest-asyncio = ">=0.24.0,<0.25"
pytest-cov = ">=4.1.0"

[tool.pixi.environments]
default = { solve-group = "default" }
dev = { features = ["dev"], solve-group = "default" }
publish = { features = ["publish"], solve-group = "default" }
test = { features = ["test", "dev"], solve-group = "dev" }


[tool.pixi.feature.publish.tasks]
# Build into a wheel using hatch
build = { cmd = "hatch build", inputs = ["anywise/*"], outputs = ["dist/*"] }
publish = { cmd = "twine upload --skip-existing dist/*", depends-on = [
  "build",
] }
